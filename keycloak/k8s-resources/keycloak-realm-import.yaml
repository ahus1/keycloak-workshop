apiVersion: k8s.keycloak.org/v2alpha1
kind: KeycloakRealmImport
metadata:
  name: riviera-dev-realm
spec:
  keycloakCRName: keycloak-riviera-dev
  realm:
    id: riviera-dev-realm
    realm: riviera-dev-realm
    displayName: 'Riviera Dev workshop'
    enabled: true
    accessTokenLifespan: 18000
    accessTokenLifespanForImplicitFlow: 18000
    ssoSessionIdleTimeout: 1800
    ssoSessionMaxLifespan: 36000
    roles:
      realm:
      - name: user
        description: 'User realm role'
        composite: false
        clientRole: false
        containerId: riviera-dev-realm
        attributes: {}
      - name: admin
        description: 'Admin realm role'
        composite: false
        clientRole: false
        containerId: riviera-dev-realm
        attributes: {}
    clients:
    - clientId: quarkus-oidc-extension
      name: ''
      description: ''
      rootUrl: http://quarkus-oidc-extension.${NAMESPACE}.${MINIKUBE_IP}.nip.io # REPLACE WITH QUARKUS_URL
      adminUrl: http://quarkus-oidc-extension.${NAMESPACE}.${MINIKUBE_IP}.nip.io # REPLACE WITH QUARKUS_URL
      baseUrl: ''
      surrogateAuthRequired: false
      enabled: true
      alwaysDisplayInConsole: false
      clientAuthenticatorType: client-secret
      secret: "1LZ65XcapsfnwEOLsByUW7KKv05mGsZF" # notsecret
      redirectUris:
      - http://quarkus-oidc-extension.${NAMESPACE}.${MINIKUBE_IP}.nip.io/* # REPLACE WITH QUARKUS_URL and append /*
      notBefore: 0
      bearerOnly: false
      consentRequired: false
      standardFlowEnabled: false
      implicitFlowEnabled: false
      directAccessGrantsEnabled: true
      serviceAccountsEnabled: false
      publicClient: false
      frontchannelLogout: true
      protocol: openid-connect
      attributes:
        oidc.ciba.grant.enabled: 'false'
        client.secret.creation.time: '1719400238'
        backchannel.logout.session.required: 'true'
        oauth2.device.authorization.grant.enabled: 'false'
        backchannel.logout.revoke.offline.tokens: 'false'
      authenticationFlowBindingOverrides: {}
      fullScopeAllowed: true
      nodeReRegistrationTimeout: -1
      defaultClientScopes:
      - web-origins
      - acr
      - roles
      - profile
      - basic
      - email
      optionalClientScopes:
      - address
      - phone
      - offline_access
      - microprofile-jwt
    - clientId: javascript-simple
      name: ''
      description: ''
      rootUrl: ''
      adminUrl: ''
      baseUrl: ''
      surrogateAuthRequired: false
      enabled: true
      alwaysDisplayInConsole: false
      clientAuthenticatorType: client-secret
      redirectUris:
      - "http://javascript-simple.${NAMESPACE}.${MINIKUBE_IP}.nip.io/*" # REPLACE WITH JAVASCRIPT_SIMPLE_URL and append /*
      webOrigins:
      - "http://javascript-simple.${NAMESPACE}.${MINIKUBE_IP}.nip.io" # REPLACE WITH JAVASCRIPT_SIMPLE_URL
      notBefore: 0
      bearerOnly: false
      consentRequired: false
      standardFlowEnabled: true
      implicitFlowEnabled: false
      directAccessGrantsEnabled: true
      serviceAccountsEnabled: false
      publicClient: true
      frontchannelLogout: true
      protocol: openid-connect
      attributes:
        oidc.ciba.grant.enabled: 'false'
        backchannel.logout.session.required: 'true'
        oauth2.device.authorization.grant.enabled: 'false'
        display.on.consent.screen: 'false'
        backchannel.logout.revoke.offline.tokens: 'false'
      authenticationFlowBindingOverrides: {}
      fullScopeAllowed: true
      nodeReRegistrationTimeout: -1
      defaultClientScopes:
      - web-origins
      - acr
      - roles
      - profile
      - basic
      - email
      optionalClientScopes:
      - address
      - phone
      - offline_access
      - microprofile-jwt
    - clientId: javascript-react
      name: ''
      description: ''
      rootUrl: ''
      adminUrl: ''
      baseUrl: ''
      surrogateAuthRequired: false
      enabled: true
      alwaysDisplayInConsole: false
      clientAuthenticatorType: client-secret
      redirectUris:
      - "http://javascript-react.${NAMESPACE}.${MINIKUBE_IP}.nip.io/*" # REPLACE WITH JAVASCRIPT_REACT_URL and append /*
      webOrigins:
      - "http://javascript-react.${NAMESPACE}.${MINIKUBE_IP}.nip.io" # REPLACE WITH JAVASCRIPT_REACT_URL
      notBefore: 0
      bearerOnly: false
      consentRequired: false
      standardFlowEnabled: true
      implicitFlowEnabled: false
      directAccessGrantsEnabled: true
      serviceAccountsEnabled: false
      publicClient: true
      frontchannelLogout: true
      protocol: openid-connect
      attributes:
        oidc.ciba.grant.enabled: 'false'
        backchannel.logout.session.required: 'true'
        oauth2.device.authorization.grant.enabled: 'false'
        display.on.consent.screen: 'false'
        backchannel.logout.revoke.offline.tokens: 'false'
      authenticationFlowBindingOverrides: {}
      fullScopeAllowed: true
      nodeReRegistrationTimeout: -1
      defaultClientScopes:
      - web-origins
      - acr
      - roles
      - profile
      - basic
      - email
      optionalClientScopes:
      - address
      - phone
      - offline_access
      - microprofile-jwt
    - clientId: spring-security
      enabled: true
      bearerOnly: false
      redirectUris:
      - 'https://spring-security.${NAMESPACE}.${MINIKUBE_IP}.nip.io/*' # REPLACE WITH SPRING_SECURITY_URL and append /*
      secret: Sj9DAvEG61ehuKIsj16PQpE34bk6Y4zq # notsecret
      authorizationServicesEnabled: true
      directAccessGrantsEnabled: true
      authorizationSettings:
        resources:
        - name: Protected Resource
          uris:
          - "/*"
          type: http://servlet-authz/protected/resource
          scopes:
          - name: urn:servlet-authz:protected:resource:access
        - name: Premium Resource
          uris: 
          - "/protected/premium/*"
          type: urn:servlet-authz:protected:resource
          scopes:
          - name: urn:servlet-authz:protected:premium:access
        policies:
        - name: Any User Policy
          description: Defines that any user can do something
          type: role
          logic: POSITIVE
          decisionStrategy: UNANIMOUS
          config:
            roles: '[{"id":"user"}]'
        - name: Only Premium User Policy
          description: Defines that only premium users can do something
          type: role
          logic: POSITIVE
          decisionStrategy: UNANIMOUS
          config:
            roles: '[{"id":"admin"}]'
        - name: All Users Policy
          description: Defines that all users can do something
          type: aggregate
          logic: POSITIVE
          decisionStrategy: AFFIRMATIVE
          config:
            applyPolicies: '["Any User Policy","Only Premium User Policy"]'
        - name: Premium Resource Permission
          description: A policy that defines access to premium resources
          type: resource
          logic: POSITIVE
          decisionStrategy: UNANIMOUS
          config:
            resources: '["Premium Resource"]'
            applyPolicies: '["Only Premium User Policy"]'
        - name: Protected Resource Permission
          description: A policy that defines access to any protected resource
          type: resource
          logic: POSITIVE
          decisionStrategy: UNANIMOUS
          config:
            resources: '["Protected Resource"]'
            applyPolicies: '["All Users Policy"]'
        scopes:
        - name: urn:servlet-authz:protected:admin:access
        - name: urn:servlet-authz:protected:resource:access
        - name: urn:servlet-authz:protected:premium:access
        - name: urn:servlet-authz:page:main:actionForPremiumUser
        - name: urn:servlet-authz:page:main:actionForAdmin
        - name: urn:servlet-authz:page:main:actionForUser
    users:
    - username: admin
      firstName: Administrator
      lastName: The Main
      email: admin@email.com
      emailVerified: false
      createdTimestamp: 1719423923528
      enabled: true
      totp: false
      credentials:
        - id: ad90997f-e6a8-495f-a5ad-361aa7bca1ed
          type: password
          userLabel: My password
          createdDate: 1719423932260
          secretData: '{"value":"KhrltyeRCFpTR6y5zV2SotExbMLQ7jOBg4EajpOFkWU=","salt":"qdoQ5ldVyocf+4z0m7XsjQ==","additionalParameters":{}}'
          credentialData: '{"hashIterations":5,"algorithm":"argon2","additionalParameters":{"hashLength":["32"],"memory":["7168"],"type":["id"],"version":["1.3"],"parallelism":["1"]}}'
      disableableCredentialTypes: []
      requiredActions: []
      realmRoles:
        - admin
        - user
        - default-roles-riviera-dev-realm
      notBefore: 0
      groups: []
    - username: user
      firstName: User
      lastName: The First
      email: user@email.com
      emailVerified: false
      createdTimestamp: 1719424016489
      enabled: true
      totp: false
      credentials:
        - id: 5be1cf70-6c35-45b5-8a32-e0f440512178
          type: password
          userLabel: My password
          createdDate: 1719424028381
          secretData: '{"value":"7n+7kp4MByv1whJHb7N3KJSiJW+0IV1xEsYukhrtL6g=","salt":"hcYtWpmf4TL09UizIYAMWg==","additionalParameters":{}}'
          credentialData: '{"hashIterations":5,"algorithm":"argon2","additionalParameters":{"hashLength":["32"],"memory":["7168"],"type":["id"],"version":["1.3"],"parallelism":["1"]}}'
      disableableCredentialTypes: []
      requiredActions: []
      realmRoles:
        - user
        - default-roles-riviera-dev-realm
      notBefore: 0
      groups: []