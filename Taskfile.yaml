version: '3'

output: prefixed

vars:
  KC_OPERATOR_TAG: "25.0.1"
  MINIKUBE_IP: 
    sh: $(minikube ip) || echo ""
  NAMESPACE: "keycloak-namespace"

tasks:

  # MINIKUBE
  prepare-minikube:
    desc: "Prepare Minikube"
    cmds:
      - minikube start
      - minikube addons enable ingress
      - minikube addons enable ingress-dns

  # KEYCLOAK
  keycloak-operator-deploy:
    # https://www.keycloak.org/operator/installation
    desc: "Install Keycloak operator to the current cluster"
    requires:
      vars:
        - NAMESPACE
    cmds:
      - kubectl create namespace "{{.NAMESPACE}}" || true
      - kubectl -n {{.NAMESPACE}} apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/refs/tags/{{.KC_OPERATOR_TAG}}/kubernetes/keycloaks.k8s.keycloak.org-v1.yml
      - kubectl -n {{.NAMESPACE}} apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/refs/tags/{{.KC_OPERATOR_TAG}}/kubernetes/keycloakrealmimports.k8s.keycloak.org-v1.yml
      - kubectl -n {{.NAMESPACE}} delete deployment/keycloak-operator || true
      - kubectl -n {{.NAMESPACE}} apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/refs/tags/{{.KC_OPERATOR_TAG}}/kubernetes/kubernetes.yml

  # KEYCLOAK
  keycloak-postgres-deploy:
    # https://www.keycloak.org/operator/basic-deployment
    desc: "Deploy Postgres database that will be used for Keycloak"
    requires:
      vars:
        - NAMESPACE
    cmd: kubectl -n {{.NAMESPACE}} apply -f keycloak/k8s-resources/postgres.yaml

  # KEYCLOAK
  create-certificates:
    # https://www.keycloak.org/operator/basic-deployment
    internal: true
    dir: .task
    requires:
      vars:
        - NAME
    cmds:
      - openssl req -subj '/CN={{.NAME}}.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io/O=Test Keycloak./C=US' -addext "subjectAltName = IP:{{.MINIKUBE_IP}}, DNS:{{.NAME}}.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io" -newkey rsa:2048 -nodes -keyout {{.NAME}}_key.pem -x509 -days 365 -out {{.NAME}}_certificate.pem
      - openssl x509 -outform der -in {{.NAME}}_certificate.pem -out {{.NAME}}_certificate.der
      - (kubectl -n {{.NAMESPACE}} delete secret {{.NAME}}-tls-secret || true) && kubectl -n {{.NAMESPACE}} create secret tls {{.NAME}}-tls-secret --cert {{.NAME}}_certificate.pem --key {{.NAME}}_key.pem
      - rm i-trust-{{.NAME}}.jks || true
      - keytool -import -alias {{.NAME}}.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io -keystore i-trust-{{.NAME}}.jks -file {{.NAME}}_certificate.der -storepass password -noprompt
      - (kubectl -n {{.NAMESPACE}} delete secret i-trust-{{.NAME}}-secret || true) && kubectl -n {{.NAMESPACE}} create secret generic i-trust-{{.NAME}}-secret --from-file=i-trust-{{.NAME}}.jks
    status:
      - test -f {{.NAME}}_key.pem
      - test -f {{.NAME}}_certificate.pem
      - test -f {{.NAME}}_certificate.der
      - kubectl -n {{.NAMESPACE}} get secret/{{.NAME}}-tls-secret

  # KEYCLOAK
  keycloak-deploy-all:
    # https://www.keycloak.org/operator/basic-deployment
    desc: "Deploy whole Keycloak"
    deps:
      - keycloak-operator-deploy
      - keycloak-postgres-deploy
    cmds:
      - task: create-certificates
        vars:
          NAME: keycloak
      - kubectl -n {{.NAMESPACE}} create secret generic keycloak-db-secret --from-literal=username=testuser --from-literal=password=testpassword || true
      - NAMESPACE={{.NAMESPACE}} MINIKUBE_IP={{.MINIKUBE_IP}} envsubst < keycloak/k8s-resources/keycloak.yaml | kubectl -n {{.NAMESPACE}} apply -f -
      - sleep 5
      - kubectl -n {{.NAMESPACE}} wait --for=condition=Ready --timeout=300s keycloaks.k8s.keycloak.org/keycloak-riviera-dev
      - NAMESPACE={{.NAMESPACE}} MINIKUBE_IP={{.MINIKUBE_IP}} envsubst < keycloak/k8s-resources/keycloak-ingress-tls-patch.yaml > .task/ingress-patch.yaml
      - kubectl -n {{.NAMESPACE}} patch ingress keycloak-riviera-dev-ingress --patch-file .task/ingress-patch.yaml
      - NAMESPACE={{.NAMESPACE}} MINIKUBE_IP={{.MINIKUBE_IP}} envsubst < keycloak/k8s-resources/keycloak-realm-import.yaml | kubectl -n {{.NAMESPACE}} apply -f -
      - |
        echo "Access Keycloak on https://keycloak.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io"
        echo "Username:" $(kubectl -n {{.NAMESPACE}} get secrets keycloak-riviera-dev-initial-admin -o json | jq .data.username -r | base64 -d)
        echo "Password:" $(kubectl -n {{.NAMESPACE}} get secrets keycloak-riviera-dev-initial-admin -o json | jq .data.password -r | base64 -d)

  quarkus-build-sources:
    desc: "Build Quarkus app sources"
    dir: quarkus-oidc-extension
    cmds:
      - ./mvnw install -DskipTests -Dminikube.ip={{.MINIKUBE_IP}} -Dnamespace={{.NAMESPACE}}

  quarkus-build-docker:
    desc: "Build Quarkus docker image for Minikube environment"
    dir: quarkus-oidc-extension
    cmds:
      - eval $(minikube docker-env) && docker build . -t quarkus-oidc-extension:1.0.0-SNAPSHOT -f src/main/docker/Dockerfile.jvm

  quarkus-deploy-all:
    desc: "Prepare and deploy Quarkus app"
    cmds:
      - cp .task/i-trust-keycloak.jks quarkus-oidc-extension/src/main/resources/
      - task: quarkus-build-sources
      - task: quarkus-build-docker
      - kubectl -n {{.NAMESPACE}} apply -f quarkus-oidc-extension/target/kubernetes/kubernetes.yml

  javascript-react-deploy:
    desc: "Deploy React frontend application that communicates with Quarkus and SpringBoot apps"
    dir: javascript-react
    cmds:
      - eval $(minikube docker-env) && docker build -t javascript-react:1.0.0-SNAPSHOT .
      - NAMESPACE={{.NAMESPACE}} MINIKUBE_IP={{.MINIKUBE_IP}} CHECKSUM=$(find src -type f -exec sha256sum {} \; | sha256sum | awk '{ print $1 }') envsubst < k8s-resources/javascript-react.yaml | kubectl -n {{.NAMESPACE}} apply -f - 

  spring-security-deploy:
    desc: "Deploy SpringBoot application that uses Keycloak for authentication"
    dir: spring-security
    cmds:
      - eval $(minikube docker-env) && ./mvnw spring-boot:build-image -DskipTests -Dminikube.ip={{.MINIKUBE_IP}} -Dnamespace={{.NAMESPACE}}
      - NAMESPACE={{.NAMESPACE}} MINIKUBE_IP={{.MINIKUBE_IP}} CHECKSUM=$(sha256sum target/spring-security-1.0.0-SNAPSHOT.jar | awk '{ print $1 }') envsubst < k8s-resources/spring-security.yaml | kubectl -n {{.NAMESPACE}} apply -f - 
    
  grafana-deploy:
    desc: "Deploy Prometheus and Grafana for monitoring"
    cmds:
      - kubectl create namespace monitoring || true
      - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - helm repo update
      - |
        helm upgrade --install prometheus prometheus-community/kube-prometheus-stack --version 39.11.0 -f grafana/monitoring.yaml \
        --set grafana."grafana\.ini".server.root_url=https://grafana.{{.MINIKUBE_IP}}.nip.io \
        --set grafana."grafana\.ini"."auth.generic_oauth".auth_url=https://keycloak.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io/realms/riviera-dev-realm/protocol/openid-connect/auth \
        --set grafana."grafana\.ini"."auth.generic_oauth".token_url=https://keycloak.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io/realms/riviera-dev-realm/protocol/openid-connect/token \
        --set grafana."grafana\.ini"."auth.generic_oauth".api_url=https://keycloak.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io/realms/riviera-dev-realm/protocol/openid-connect/userinfo \
        --set prometheus.prometheusSpec.retention=168h
      - helm upgrade --install monitoring --set namespace={{.NAMESPACE}} --set hostname={{.MINIKUBE_IP}}.nip.io grafana/monitoring



    
    
